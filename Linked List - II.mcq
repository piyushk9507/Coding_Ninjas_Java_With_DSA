What does the following function do?
void fun(Node head)
{
  if(head == null)
    return;

   fun(head.next);
   System.out.print( head.data);
}

Options
This problem has only one correct answer
Print all Nodes of Linked List
Print all Nodes of Linked List in reverse order   ===  Correct Answer
Print alternate Nodes of Linked list
Print alternate Nodes of Linked list in reverse order
========================================================================

What will be the correct output of the code, If the linked list is 1->2->3->4->5->6 and start stores the address of node 1.

void fun(Node start)
{
  if(start == null)
    return;
  System.out.printf( start.data); 

  if(start.next != null )
    fun(start.next.next);
  System.out.printf(start.data);
}


Options
This problem has only one correct answer
1 3 5
1 2 4
1 2 4 4 2 1
1 3 5 5 3 1      ==  correct answer 

Solution Description
fun() prints alternate nodes of the given Linked List, first from head to end, and then from end to head. If Linked List has even number of nodes, then skips the last 
node.
=========================================================================

Traversal

In doubly linked lists, traversal can be done in ?

Options
This problem has only one correct answer
Only forward direction
Only reverse direction
Both directions          ====  Correct Answer
None of the above
========================================================================

Doubly LL

Given an unsorted doubly Linked List, suppose you have references (or pointer) to its head and tail nodes, which of the following operation can be implemented in O(1) time ?
i) Insertion at the front of the linked list
ii) Insertion at the end of the linked list
iii) Deletion of the last node of the linked list
iv) Deletion of the front node of the linked list

This problem has only one correct answer
I and II
I and III
I,II and III
I,II, III and IV          ====   Correct Answer
=========================================================================

Circular LL

Given an unsorted circular linked list, suppose you have reference (or pointer) to its head node only, which of the following operation can be implemented in O(1) time?
i) Insertion at the front of the linked list
ii) Insertion at the end of the linked list
iii) Deletion of the last node of the linked list
iv) Deletion of the front node of the linked list

This problem has only one correct answer
I and II
I and III
I,II and III
None         ====   Correct Answer
=========================================================================

Time Complexity

What are the time complexities of finding 6th element from beginning and 6th element from end in a singly linked list? Let n be the number of nodes in linked list, you may assume that n > 7.

This problem has only one correct answer
O(1) and O(n)         ====    Correct Answer
O(n) and O(n)
O(1) and O(1)
O(n) and O(1)
==========================================================================

Concat Linked List

The concatenation of two lists is to be performed in O(1) time. Which of the following implementations of a list should be used?

Options
This problem has only one correct answer
Singly Linked List
Doubly Linked List
Circular Doubly Linked List     ====   Correct Answer
Circular Linked List
==========================================================================



