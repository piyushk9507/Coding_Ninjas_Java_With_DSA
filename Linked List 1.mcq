Which of these standard collection classes implements a dynamic array?

Options
This problem has only one correct answer
AbstractList
AbstractSet
Arraylist
ArrayList  ==  Correct Answer
=========================================

Which of these method of ArrayList class is used to obtain present size of an ArrayList object?

Options
This problem has only one correct answer
length()
size()     ==  Correct Answer
capacity()
index()
=========================================

Which of the following declarations would be correct for a list that will contain Integers?

This problem has only one correct answer
ArrayList<String> list = new ArrayList<String>() ;
ArrayList<int> list = new ArrayList<int>() ;
ArrayList list = new ArrayList() ;
ArrayList<Integer> list = new ArrayList<Integer>() ;       ==   Correct Answer
==============================================

Consider the following code:
ArrayList<String> list = new ArrayList<String>() ;
list.add( "apple" );
list.add( "banana" );
list.add( "carrot" );
list.add( 0, "mango" );
What element will be at index 2 of the list?

Answer = banana
==================================================

Figure Out Correct Statement
Send Feedback
Consider the following code:
ArrayList<String> list = new ArrayList<String>() ;
list.add( "Ant" );
list.add( "Bat" );
list.add( "Car" );
list.add( "Door" );
list.add( "Euro" );
Which of the following statements will replace the element "Car" with "Bus" ?


Options
This problem has only one correct answer
list[2] = "Bus" ;
list.add( "Bus", list.indexOf("Car") );
list.set( 2, "Bus" );              ==    Correct Answer
list.set( "Bus", "Car" );
================================================================================

Linked List Use Case

Linked List are best suited:

Options
This problem has only one correct answer
for relatively permanent collections of data.
for the size of the structure is constantly changing.  ==  Correct Answer
for random Access of elements
None of these
================================================================================

What is Output?

//Consider the Node class as shown below :

public class Node<T> {
  T data;
  Node<T> next;
  Node(T data){
    this.data = data;
  }
}

//Now consider following code using Node class shown above.

public  class LinkedListUse{

 public static void print(Node<Integer> head){
    Node<Integer> temp = head;

    while(temp != null){
        System.out.print(temp.data +" ");
        temp = temp.next;
    }
    System.out.println();
}

public static void main(String args[]){

    Node<Integer> node1 = new Node<Integer>(10);
    Node<Integer> node2 = new Node<Integer>(20);
    node2.next = node1;
    print(node2);
   }
}
What will be the Output ?    == 20 10 
==========================================================================

Predict The Output?
Send Feedback
Consider the Node class as shown below :
public class Node<T> {
  T data;
  Node<T> next;
  Node(T data){
    this.data = data;
  }
}
Now consider following code using Node class shown above.
public  class LinkedListUse{

 public static void print(Node<Integer> head){
    Node<Integer> temp = head;

    while(temp != null){
        System.out.print(temp.data +" ");
        temp = temp.next;
    }
    System.out.println();
}

public static void main(String args[]){

    Node<Integer> node1 = new Node<Integer>(10);
    Node<Integer> node2 = new Node<Integer>(20);
    Node<Integer> node3 = new Node<Integer>(30);
    Node<Integer> node4 = new Node<Integer>(40);
    node1.next = node2;
    node2.next = node3;
    node3.next = node4;
    print(node2);
   }
}
What will be the Output ?
info
You have max 2 attempts to score in this question.
Attempts left:
1/2
Options
This problem has only one correct answer
10 20 30 40
20 30 40     ==   Correct Answer
30 40
10 30 40
==================================================================

Find Output?
Send Feedback
Consider the Node class as shown below :
public class Node<T> {
  T data;
  Node<T> next;
  Node(T data){
    this.data = data;
  }
}
Now consider following code using Node class shown above.
public  class LinkedListUse{

 public static void print(Node<Integer> head){
    Node<Integer> temp = head;

    while(temp != null){
        System.out.print(temp.data +" ");
        temp = temp.next;
    }
    System.out.println();
}

public static void increment(Node<Integer> head){
    Node<Integer> temp = head;
    while(temp != null){
        temp.data++;
        temp = temp.next;
    }
}

public static void main(String args[]){

    Node<Integer> node1 = new Node<Integer>(10);
    Node<Integer> node2 = new Node<Integer>(20);
    node1.next = node2;
    increment(node1);
    print(node1);
   }
}

Options
This problem has only one correct answer
10 20
11 21   == Correct Answer
Error
None of these
===================================================================================================


Search In LL
Send Feedback
What will be the time complexity of searching an element in the linked list ?

Options
This problem has only one correct answer
O(1)
O(n)      ====   Correct Answer
O(nlogn)
O(n^2)
===================================================================================================

Add element at last

Consider the Singly linked list having n elements. What will be the time taken to add an node at the end of linked list if is initially pointing to first node of the list.
That is only head is given to you.

Options
This problem has only one correct answer
O(n)      =====    Correct Answer
O(1)
O(nlogn)
O(n^2)
=====================================================================================================

Insert At 2nd Position

There is reference (or pointer) to first Node of the Linked List, then time required to insert element to second position is __________.
Indexing starts from 0.

Options
This problem has only one correct answer
O(1)       ====  correct answer
O(n)
O(nlogn)
O(n^2)
========================================================================

Operations In O(1)

Given an unsorted singly Linked List, suppose you have reference (or pointer) to its head node only, which of the following operation can be implemented in O(1) time?
i)   Insertion at the front of the linked list
ii)  Insertion at the end of the linked list
iii) Deletion of the last node of the linked list
iv)  Deletion of the front node of the linked list

Options
This problem has only one correct answer
I and II
I and IV       ====   Correct Answer
I, II and III
I, II and IV
========================================================================

Operations In O(1)

Given an unsorted singly Linked List, suppose you have references (or pointer) to its head and tail nodes, which of the following operation can be implemented in O(1) time?
i)   Insertion at the front of the linked list
ii)  Insertion at the end of the linked list
iii) Deletion of the last node of the linked list
iv)  Deletion of the front node of the linked list

Options
This problem has only one correct answer
I and II
I and III
I,II and III
I,II and IV     ====   Correct Answer


